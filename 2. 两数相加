
// 自己在题中所犯的错误
// 1. 在测试用例[1,8],[0] 两数相加过程中出现错误，因为在p2当前为null的情况下进行p2-p2.next，空指针错误
/  2.  [9] 和[9] 相加任务出错， 因为当前加完后对于进位jinIndex忘记进行处理，应该再添加一个节点进行处理。
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode l3 = new ListNode(0);
        ListNode ll3 = l3;
        ListNode p1 = l1;
        ListNode p2 = l2;
        int jinindex = 0;
        int value =0;
        
        while(p1!=null || p2!=null){
               
            if(p1!=null && p2 !=null){      
                value  = p1.val + p2.val + jinindex;
                
            }else if (p1 == null && p2 !=null){
                value = p2.val + jinindex ;
                jinindex = 0;
            }else if(p2 == null && p1 != null) {
                value = p1.val + jinindex ;
                jinindex = 0;
            }
           if(value < 10){ value = value; jinindex = 0;}
                else{
                    value = value - 10; jinindex = 1;
                    }
           if(p1!=null){
           p1 = p1.next;}
           if(p2!=null){
           p2 = p2.next;
           }
           ListNode p = new ListNode(value);
           ll3.next = p;
           ll3 = p;
        }
        // 将p1=null 和p2=null 的最高位存进来
        if(jinindex ==1) {
            ListNode pp = new ListNode(1);
            ll3.next = pp;
        }
        

    // 去掉l3的头。得到返回的加和的反方向的值
        l3 = l3.next; 
    // 反转 l3, 得到返回的l3
    /*
        ListNode pre = l3;
        ListNode pos = l3.next;
        ListNode posnext = null;
        while(pos!=null){
            posnext = pos.next;
            pos.next = pre;
            pre = pos;
            pos = posnext;
        }
     */   

        return l3;    

    }
}
